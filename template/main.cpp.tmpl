#include <signal.h>     // included for 'signal()'
#include <string.h>     // included for 'strsignal()'
#include <stdlib.h>     // included for 'EXIT_SUCCESS'
#include <atomic>       // included for 'std::atomic<>'
#include <iostream>     // included for 'std::cout'
#include <thread>       // included for 'std::this_thread'

std::atomic<bool> exit_request{false};

// Handle signals
void sighandler(int signo) {
    std::cout << "Caught signal number " << std::to_string(signo) << " ("
            << strsignal(signo) << ")" << std::endl;
    exit_request = true;
}

void setup_signal_handler() {
    signal(SIGINT, sighandler);     // SIGINT signal is normally generated by ctrl-c.
    signal(SIGQUIT, sighandler);    // SIGQUIT signal is usually generated by ctrl-\.
    signal(SIGTERM, sighandler);    // shell command `kill' generates SIGTERM
                                    // signal by default
    signal(SIGPIPE, SIG_IGN);       // ignore SIGPIPE signal
}

// Main entry
int main(int argc, char *argv[]) {
    setup_signal_handler();

    // Simulate tasks that run for a long time
    while (!exit_request) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }

    return EXIT_SUCCESS;
}
