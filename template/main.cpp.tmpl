// MIT License

// Copyright (c) 2024 iBlackAngel <iblackangel@163.com>

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include <signal.h>     // included for 'signal()'
#include <string.h>     // included for 'strsignal()'
#include <stdlib.h>     // included for 'EXIT_SUCCESS'
#include <atomic>       // included for 'std::atomic<>'
#include <iostream>     // included for 'std::cout'
#include <thread>       // included for 'std::this_thread'

std::atomic<bool> exit_request{false};

// Handle signals
void sighandler(int signo) {
    std::cout << "Caught signal number " << std::to_string(signo) << " ("
            << strsignal(signo) << ")" << std::endl;
    exit_request = true;
}

void setup_signal_handler() {
    signal(SIGINT, sighandler);     // SIGINT signal is normally generated by ctrl-c.
    signal(SIGQUIT, sighandler);    // SIGQUIT signal is usually generated by ctrl-\.
    signal(SIGTERM, sighandler);    // shell command `kill' generates SIGTERM
                                    // signal by default
    signal(SIGPIPE, SIG_IGN);       // ignore SIGPIPE signal
}

// Main entry
int main(int argc, char *argv[]) {
    setup_signal_handler();

    std::cout << "Demonstrate using template for ${project}" << std::endl;

    // Simulate tasks that run for a long time
    while (!exit_request) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }

    return EXIT_SUCCESS;
}
